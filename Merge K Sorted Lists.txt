/**
 * class ListNode {
 *   public int value;
 *   public ListNode next;
 *   public ListNode(int value) {
 *     this.value = value;
 *     next = null;
 *   }
 * }
 */
public class Solution {
  public ListNode merge(List<ListNode> listOfLists) {
    // Write your solution here/.
    //Assumptions: Do the merge in place
    
    if(listOfLists == null || listOfLists.size() == 0){
      return null;
    }
    PriorityQueue<ListNode> heads = new PriorityQueue<ListNode>(listOfLists.size(), new Comparator<ListNode>(){
      @Override
      public int compare(ListNode l1, ListNode l2){
        if(l1.value == l2.value){
          return 0;
        }
        return l1.value < l2.value ? -1 : 1;
      }
    });
    ListNode resDummy = new ListNode(0);
    ListNode resLast = resDummy;
    
    for(ListNode listNode : listOfLists){
      if(listNode == null){
        continue;
      }
      heads.offer(listNode);
    }
    while(!heads.isEmpty()){
      ListNode curListNode = heads.poll();
      resLast.next = curListNode;
      if(curListNode.next != null){
        heads.offer(curListNode.next);
      }
      resLast = resLast.next;
    }
    resLast.next = null;
    return resDummy.next;
    
  }
}
